import type { Auth, Env, Session } from "./index.js";
import type { Cookie } from "./cookie.js";
export type LuciaRequest = {
    method: string;
    url: string;
    headers: {
        origin: string | null;
        cookie: string | null;
        authorization: string | null;
    };
    storedSessionCookie?: string | null;
};
export type RequestContext = {
    request: LuciaRequest;
    setCookie: (cookie: Cookie) => void;
};
export type Middleware<Args extends any[] = any> = (context: {
    args: Args;
    env: Env;
    sessionCookieName: string;
}) => RequestContext;
export declare class AuthRequest<_Auth extends Auth = any> {
    private auth;
    private context;
    constructor(auth: _Auth, { context, csrfProtectionEnabled }: {
        context: RequestContext;
        csrfProtectionEnabled: boolean;
    });
    private validatePromise;
    private validateBearerTokenPromise;
    private storedSessionId;
    private bearerToken;
    setSession: (session: Session | null) => void;
    private setSessionCookie;
    validate: () => Promise<Session | null>;
    validateBearerToken: () => Promise<Session | null>;
}
