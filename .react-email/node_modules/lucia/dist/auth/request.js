import { debug } from "../utils/debug.js";
import { LuciaError } from "./error.js";
export class AuthRequest {
    auth;
    context;
    constructor(auth, { context, csrfProtectionEnabled }) {
        debug.request.init(context.request.method, context.request.url);
        this.auth = auth;
        this.context = context;
        try {
            if (csrfProtectionEnabled) {
                auth.validateRequestOrigin(context.request);
            }
            this.storedSessionId =
                context.request.storedSessionCookie ??
                    auth.readSessionCookie(context.request.headers.cookie);
        }
        catch (e) {
            this.storedSessionId = null;
        }
        this.bearerToken = auth.readBearerToken(context.request.headers.authorization);
    }
    validatePromise = null;
    validateBearerTokenPromise = null;
    storedSessionId;
    bearerToken;
    setSession = (session) => {
        const sessionId = session?.sessionId ?? null;
        if (this.storedSessionId === sessionId)
            return;
        this.validatePromise = null;
        this.setSessionCookie(session);
    };
    setSessionCookie = (session) => {
        const sessionId = session?.sessionId ?? null;
        if (this.storedSessionId === sessionId)
            return;
        this.storedSessionId = sessionId;
        try {
            this.context.setCookie(this.auth.createSessionCookie(session));
            if (session) {
                debug.request.notice("Session cookie stored", session.sessionId);
            }
            else {
                debug.request.notice("Session cookie deleted");
            }
        }
        catch (e) {
            // ignore
        }
    };
    validate = async () => {
        if (this.validatePromise) {
            debug.request.info("Using cached result for session validation");
            return this.validatePromise;
        }
        this.validatePromise = new Promise(async (resolve) => {
            if (!this.storedSessionId)
                return resolve(null);
            try {
                const session = await this.auth.validateSession(this.storedSessionId);
                if (session.fresh) {
                    this.setSessionCookie(session);
                }
                return resolve(session);
            }
            catch (e) {
                if (e instanceof LuciaError) {
                    this.setSessionCookie(null);
                    return resolve(null);
                }
                throw e;
            }
        });
        return await this.validatePromise;
    };
    validateBearerToken = async () => {
        if (this.validateBearerTokenPromise) {
            debug.request.info("Using cached result for bearer token validation");
            return this.validatePromise;
        }
        this.validatePromise = new Promise(async (resolve) => {
            if (!this.bearerToken)
                return resolve(null);
            try {
                const session = await this.auth.getSession(this.bearerToken);
                if (session.state === "idle")
                    return resolve(null);
                return resolve(session);
            }
            catch (e) {
                if (e instanceof LuciaError) {
                    return resolve(null);
                }
                throw e;
            }
        });
        return await this.validatePromise;
    };
}
