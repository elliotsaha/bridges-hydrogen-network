const getIncomingMessageUrl = (incomingMessage, env) => {
    if (!incomingMessage.headers.host)
        return "";
    const protocol = env === "DEV" ? "http:" : "https:";
    const host = incomingMessage.headers.host;
    const pathname = incomingMessage.url ?? "";
    return `${protocol}//${host}${pathname}`;
};
export const node = () => {
    return ({ args, env }) => {
        const [incomingMessage, outgoingMessage] = args;
        const requestContext = {
            request: {
                url: getIncomingMessageUrl(incomingMessage, env),
                method: incomingMessage.method ?? "",
                headers: {
                    origin: incomingMessage.headers.origin ?? null,
                    cookie: incomingMessage.headers.cookie ?? null,
                    authorization: incomingMessage.headers.authorization ?? null
                }
            },
            setCookie: (cookie) => {
                const setCookieHeaderValues = outgoingMessage
                    .getHeader("Set-Cookie")
                    ?.toString()
                    .split(",")
                    .filter((val) => val) ?? [];
                outgoingMessage.setHeader("Set-Cookie", [
                    cookie.serialize(),
                    ...setCookieHeaderValues
                ]);
            }
        };
        return requestContext;
    };
};
export const express = () => {
    return ({ args }) => {
        const [req, res] = args;
        const getUrl = () => {
            if (!req.headers.host)
                return "";
            const protocol = req.protocol;
            const host = req.headers.host;
            const pathname = req.path;
            return `${protocol}://${host}${pathname}`;
        };
        const requestContext = {
            request: {
                url: getUrl(),
                method: req.method,
                headers: {
                    origin: req.headers.origin ?? null,
                    cookie: req.headers.cookie ?? null,
                    authorization: req.headers.authorization ?? null
                }
            },
            setCookie: (cookie) => {
                res.cookie(cookie.name, cookie.value, cookie.attributes);
            }
        };
        return requestContext;
    };
};
export const fastify = () => {
    return ({ args }) => {
        const [req, res] = args;
        const getUrl = () => {
            if (!req.headers.host)
                return "";
            const protocol = req.protocol;
            const host = req.headers.host;
            const pathname = req.url;
            return `${protocol}://${host}${pathname}`;
        };
        const requestContext = {
            request: {
                url: getUrl(),
                method: req.method,
                headers: {
                    origin: req.headers.origin ?? null,
                    cookie: req.headers.cookie ?? null,
                    authorization: req.headers.authorization ?? null
                }
            },
            setCookie: (cookie) => {
                res.header("Set-Cookie", [cookie.serialize()]);
            }
        };
        return requestContext;
    };
};
export const sveltekit = () => {
    return ({ args, sessionCookieName }) => {
        const [event] = args;
        const requestContext = {
            request: {
                url: event.request.url,
                method: event.request.method,
                headers: {
                    origin: event.request.headers.get("Origin"),
                    cookie: event.request.headers.get("Cookie"),
                    authorization: event.request.headers.get("Authorization")
                },
                storedSessionCookie: event.cookies.get(sessionCookieName) ?? null
            },
            setCookie: (cookie) => {
                event.cookies.set(cookie.name, cookie.value, cookie.attributes);
            }
        };
        return requestContext;
    };
};
export const astro = () => {
    return ({ args, sessionCookieName }) => {
        const [context] = args;
        const requestContext = {
            request: {
                url: context.request.url,
                method: context.request.method,
                headers: {
                    origin: context.request.headers.get("Origin"),
                    cookie: context.request.headers.get("Cookie"),
                    authorization: context.request.headers.get("Authorization")
                },
                storedSessionCookie: context.cookies.get(sessionCookieName).value || null
            },
            setCookie: (cookie) => {
                context.cookies.set(cookie.name, cookie.value, cookie.attributes);
            }
        };
        return requestContext;
    };
};
export const qwik = () => {
    return ({ args, sessionCookieName }) => {
        const [event] = args;
        const requestContext = {
            request: {
                url: event.request.url.toString(),
                method: event.request.method,
                headers: {
                    origin: event.request.headers.get("Origin"),
                    cookie: event.request.headers.get("Cookie"),
                    authorization: event.request.headers.get("Authorization")
                },
                storedSessionCookie: event.cookie.get(sessionCookieName)?.value ?? null
            },
            setCookie: (cookie) => {
                event.cookie.set(cookie.name, cookie.value, cookie.attributes);
            }
        };
        return requestContext;
    };
};
export const lucia = () => {
    return ({ args }) => args[0];
};
export const web = () => {
    return ({ args }) => {
        const [request] = args;
        const requestContext = {
            request: {
                url: request.url,
                method: request.method,
                headers: {
                    origin: request.headers.get("Origin"),
                    cookie: request.headers.get("Cookie"),
                    authorization: request.headers.get("Authorization")
                }
            },
            setCookie: () => {
                throw new Error("Cookies cannot be set when using the `web()` middleware");
            }
        };
        return requestContext;
    };
};
export const nextjs = () => {
    return ({ args, sessionCookieName, env }) => {
        const [serverContext] = args;
        if ("request" in serverContext || "cookies" in serverContext) {
            const request = "request" in serverContext ? serverContext.request : serverContext;
            const readonlyCookieStore = typeof serverContext.cookies === "function"
                ? serverContext.cookies()
                : serverContext.cookies;
            const sessionCookie = readonlyCookieStore.get(sessionCookieName)?.value ?? null;
            const requestContext = {
                request: {
                    url: request?.url ?? "",
                    method: request?.method ?? "GET",
                    headers: {
                        origin: request?.headers?.get("Origin") ?? null,
                        cookie: null,
                        authorization: request?.headers?.get("Authorization") ?? null
                    },
                    storedSessionCookie: sessionCookie
                },
                setCookie: (cookie) => {
                    if (typeof serverContext.cookies !== "function")
                        return;
                    const cookieStore = serverContext.cookies();
                    if (!cookieStore.set)
                        return;
                    try {
                        cookieStore.set(cookie.name, cookie.value, cookie.attributes);
                    }
                    catch {
                        // ignore - set() is not available
                    }
                }
            };
            return requestContext;
        }
        const req = "req" in serverContext ? serverContext.req : serverContext;
        const res = "res" in serverContext ? serverContext.res : null;
        const request = {
            url: getIncomingMessageUrl(req, env),
            method: req.method ?? "",
            headers: {
                origin: req.headers.origin ?? null,
                cookie: req.headers.cookie ?? null,
                authorization: req.headers.authorization ?? null
            }
        };
        const requestContext = {
            request,
            setCookie: (cookie) => {
                if (!res)
                    return;
                const setCookieHeaderValues = res
                    .getHeader("Set-Cookie")
                    ?.toString()
                    .split(",")
                    .filter((val) => val) ?? [];
                res.setHeader("Set-Cookie", [
                    cookie.serialize(),
                    ...setCookieHeaderValues
                ]);
            }
        };
        return requestContext;
    };
};
export const h3 = () => {
    const nodeMiddleware = node();
    return ({ args, sessionCookieName, env }) => {
        const [context] = args;
        return nodeMiddleware({
            args: [context.node.req, context.node.res],
            sessionCookieName,
            env
        });
    };
};
export const hono = () => {
    return ({ args }) => {
        const [context] = args;
        const requestContext = {
            request: {
                url: context.req.url,
                method: context.req.method,
                headers: {
                    origin: context.req.headers.get("Origin"),
                    cookie: context.req.headers.get("Cookie"),
                    authorization: context.req.headers.get("Authorization")
                }
            },
            setCookie: (cookie) => {
                context.header("Set-Cookie", cookie.serialize());
            }
        };
        return requestContext;
    };
};
